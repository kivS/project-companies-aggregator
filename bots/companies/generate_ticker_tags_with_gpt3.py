'''

    params:
    - ticker_symbol (optional)
    - --skip-filled (optional) - skip tickers that already have tags
'''

import sys
import os
# root project dir
sys.path.append(os.path.abspath("/var/www/project-companies-aggregator"))
from env import * # local env file
import openai
import sqlite3
import json

COMPLETION_SEED = '''
Given the company's name, country, sector, industry and description, generate tags describing what the company does, works in or is trying to solve.
---
name: Tesla Inc.
country: United States
sector: Capital Goods
Industry: Auto Manufacturing
description: Tesla, Inc. engages in the design, development, manufacture, and sale of fully electric vehicles, energy generation and storage systems. It also provides vehicle service centers, supercharger station, and self-driving capability. The company operates through the following segments: Automotive and Energy Generation and Storage. The Automotive segment includes the design, development, manufacture and sale of electric vehicles. The Energy Generation and Storage segment includes the design, manufacture, installation, sale, and lease of stationary energy storage products and solar energy systems, and sale of electricity generated by its solar energy systems to customers. It develops energy storage products for use in homes, commercial facilities and utility sites. The company was founded by Jeffrey B. Straubel, Elon Reeve Musk, Martin Eberhard, and Marc Tarpenning on July 1, 2003 and is headquartered in Palo Alto, CA.
tags: [
"renewable energy",
"energy generation",
"energy storage systems",
"transition to sustainable energy",
"charging stations",
"electric automotive",
"stationary energy storage products",
"energy storage for utility sites",
"energy storage for commercial sites",
"energy storage for homes",
"electric cars",
"grid services",
"solar energy",
"solar panels",
"climate change",
"green energy",
"ev",
"autonomous driving",
"AI"
]
---
name: Moderna Inc.
country: United States
sector: Health Care
Industry: Biotechnology: Biological Products (No Diagnostic Substances)
description: Moderna, Inc. engages in the development of transformative medicines based on messenger ribonucleic acid (mRNA). Its product pipeline includes the following modalities: prophylactic vaccines, cancer vaccines, intratumoral immuno-oncology, localized regenerative therapeutics, systemic secreted therapeutics, and systemic intracellular therapeutics. The company was founded by Noubar B. Afeyan, Robert S. Langer, Jr., Derrick J. Rose and Kenneth R. Chien in 2010 and is headquartered in Cambridge, MA.
tags:[
"mRNA",
"transformative medicines",
"prophylactic vaccines",
"intratumoral immuno-oncology",
"localized regenerative therapeutics",
"systemic secreted therapeutics",
"systemic intracellular therapeutics",
"drug discovery",
"drug development",
"messenger RNA"
]
---
name: Amazon.com Inc
country: United States
sector: Consumer Services
Industry: Catalog/Specialty Distribution
description: Amazon.com, Inc. engages in the provision of online retail shopping services. It operates through the following business segments: North America, International, and Amazon Web Services (AWS). The North America segment includes retail sales of consumer products and subscriptions through North America-focused websites such as www.amazon.com and www.amazon.ca. The International segment offers retail sales of consumer products and subscriptions through internationally-focused websites. The Amazon Web Services segment involves in the global sales of compute, storage, database, and AWS service offerings for start-ups, enterprises, government agencies, and academic institutions. The company was founded by Jeffrey P. Bezos in July 1994 and is headquartered in Seattle, WA.
tags:[
"e-commerce",
"online retail shopping services",
"cloud",
"web services",
"compute",
"storage",
"database",
"e-readers",
"direct publishing",
"tablets",
"tv",
"smarttv",
"software",
"hardware",
"internet of things"
]
'''.lstrip()


NEW_TAGS_COMPLETION_TEMPLATE = '''
---
name: {name}
country: {country}
sector:  {sector}
Industry: {industry}
description: {description}
tags:[ 
'''.strip()

MAX_PROMPT_TOKEN_LENGTH = 2048 # 1 token ~ 4 chars or 1 'hell'

def get_gpt3_tags(prompt: str):
    response = openai.Completion.create(
        engine="davinci-instruct-beta-v3",
        prompt= prompt,
        temperature=0.72,
        max_tokens=900,
        top_p=1,
        frequency_penalty=0.93,
        presence_penalty=0.74,
        stop=["---", "]"]
    )
    return response

def build_prompt(name: str, country: str, sector: str, industry: str, description: str) -> str:
    prompt = COMPLETION_SEED + NEW_TAGS_COMPLETION_TEMPLATE.format(
        name=name,
        country=country,
        sector=sector,
        industry=industry,
        description=description
    )
    return prompt

if __name__ == '__main__':
    con = sqlite3.connect(DB_PATH)
    con.row_factory = sqlite3.Row
    cursor = con.cursor()
    openai.api_key = OPENAI_API_KEY

    skip_filled = False if '--skip-filled' not in sys.argv else True

    if len(sys.argv) > 1:
        ticker_symbol = sys.argv[1]

        ticker = cursor.execute('''
            SELECT *
            FROM stonks 
            WHERE symbol = ? LIMIT 1''', (ticker_symbol,)
        ).fetchone()

        if ticker is None:
            print(f'Ticker symbol "{ticker_symbol}" not found in db')
            sys.exit(1)

        # check if ticker is elligible for gpt3 completion, ie, has at least a description, industry and sector
        if ticker['description'] is None or ticker['industry'] is None or ticker['sector'] is None:
            print(f'Ticker symbol "{ticker_symbol}" not elligible for gpt3 completion. Missing description, industry or sector')
            sys.exit(1)

        # confirm in case tags is already present
        if ticker['tags'] is not None:
            print(f'Ticker symbol "{ticker_symbol}" already has tags')
            confirm =  'n' if skip_filled  else input('Do you want to overwrite? [y/n] ')
            if confirm != 'y':
                print('Aborting...')
                sys.exit(1)

        # build the prompt for gpt-3
        completion_prompt = build_prompt(
                name=ticker['clean_name'],
                country= '' if ticker['country'] is None else ticker['country'],
                sector= '' if ticker['sector'] is None else ticker['sector'],
                industry= '' if ticker['industry'] is None else ticker['industry'],
                description= '' if ticker['description'] is None else ticker['description']
        )

        # make sure prompt is not too long
        if len(completion_prompt) > MAX_PROMPT_TOKEN_LENGTH:
            print(f"Ticker symbol '{ticker_symbol}' prompt is too long. length is {len(completion_prompt)}/{MAX_PROMPT_TOKEN_LENGTH}. cutting prompt down a bit...")
            # truncate description
            description = ticker['description']
            new_max_len = len(description) - (len(completion_prompt) - MAX_PROMPT_TOKEN_LENGTH) # lets remove the excess chars in the prompt from the description
            description = f"{description[: new_max_len]}."

            completion_prompt = build_prompt(
                name=ticker['clean_name'],
                country= '' if ticker['country'] is None else ticker['country'],
                sector= '' if ticker['sector'] is None else ticker['sector'],
                industry= '' if ticker['industry'] is None else ticker['industry'],
                description=description
            )

        try:
            result = get_gpt3_tags(completion_prompt)
        except Exception as e:
            print(f"Failed to get gpt-3 completion for: {ticker['symbol']} | Error: {e}")
            sys.exit(1)
        print(result.choices[0])

        # parse the completion results and clean up the tags
        result_text = result.choices[0]['text']
        tags: list = result_text.replace('"', '').replace('\n', '').split(',')

        print(f'tags from gpt-3: {json.dumps(tags)}')
        

        # update the ticker record
        q = cursor.execute('UPDATE stonks SET tags = ? WHERE symbol = ?', (json.dumps(tags), ticker['symbol']))
        con.commit()

